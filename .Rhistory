M = 1e2
# vector of T_1, T_2, ..., T_M closer to 0
big_T = 1/(1:M)
# number of iterations for each Metropolis-Hastings (sampling) algorithm
N = rep(1e2,M)
h = Neg_EI # comment to test other h
f_min <- min(sampling$Value)
f_min_tracker <- c(f_min)
i = 1
if (i != 1) {
top <- data.frame(X1 = best[2], X2 = best[3])
top[1,3] <- DiceKriging::branin(top)
sampling <- rbind(top,sampling)
f_min <- min(sampling[,3])
f_min_tracker <- c(f_min_tracker, f_min)
}
## First estimate parameter
fitted_model <- DiceKriging::km(formula = ~1,
design = cbind(sampling$X1,sampling$X2),
response = sampling[,3],
covtype = "exp",
control = list(trace=FALSE))
# starting point
x0 = rep(0,dim)
# best value and point
best = c(h(x0),x0)
current = x0
for (k in 1:M) {
target = function(x) {
exp(-h(x) / big_T[k])
}
pi_current = target(current)
for (i in N[k]) {
# proposed point and target function value
proposed = rnorm(dim,current,0.5)%%1
pi_proposed = target(proposed)
u = runif(1)
# accept/reject proposed point
if (pi_current < Inf & (pi_current == 0 | u <= pi_proposed / pi_current)) {
current = proposed
pi_current = pi_proposed
}
# update the best point and value if value is better
h_current = h(current)
if (h_current < best[1]) {
best = c(h_current, current)
}
}
}
i = 2
top <- data.frame(X1 = best[2], X2 = best[3])
top[1,3] <- DiceKriging::branin(top)
sampling <- rbind(top,sampling)
top
top <- data.frame(X1 = best[2], X2 = best[3])
top[1,3] <- DiceKriging::branin(top)
top
top[,3][1] <- DiceKriging::branin(top)
top
top <- data.frame(X1 = best[2], X2 = best[3])
top[,3][1] <- DiceKriging::branin(top)
top <- data.frame(X1 = best[2], X2 = best[3], Value = NA)
top$Value[1] <- DiceKriging::branin(top)
top$Value
top
top$Value
top
top <- data.frame(X1 = best[2], X2 = best[3], Value = NA)
top$Value <- DiceKriging::branin(top)
top
top <- data.frame(X1 = best[2], X2 = best[3], Value = NA)
top$Value[1] <- DiceKriging::branin(top)
top
top$Value
top
sampling
sampling <- rbind(top,sampling)
sampling$Value
top[1,3]
top <- data.frame(X1 = best[2],
X2 = best[3],
Value = NA)
top
typeof(top)
best
best[2]
top <- data.frame(X1 = c(best[2]),
X2 = c(best[3]),
Value = NA)
top
typeof(top)
top <- data.frame(X1 = c(best[2]),
X2 = c(best[3]),
Value = 0)
top
typeof(top)
top
top$Value
top$Value <- DiceKriging::branin(top)
DiceKriging::branin(top)
top
DiceKriging::branin(top$X1,top$X2)
DiceKriging::branin(c(top$X1,top$X2))
top$Value <- DiceKriging::branin(c(top$X1,top$X2))
top
top$Value
sampling <- rbind(top,sampling)
sampling
set.seed(0)
library(readxl)
library(tidyverse)
sampling_old <- read_xlsx("initial_sampling_data.xlsx", col_names = FALSE)
sampling <- sampling_old[sample(1:95,20),]
colnames(sampling) <- c("X1", "X2", "Value")
sampling$Value <- apply(sampling[,1:2], 1, DiceKriging::branin)
# negative expected improvement function (we try to minimize)
Neg_EI = function(x) {
y <- predict(fitted_model, matrix(x,nrow = 1), "UK")$mean
s <- predict(fitted_model, matrix(x,nrow = 1), "UK")$sd
z = (f_min-y)/s
-(f_min-y)*pnorm(z)-s*dnorm(z)
}
# Hyperparameters
dim = 2
# number of iterations
M = 1e2
# vector of T_1, T_2, ..., T_M closer to 0
big_T = 1/(1:M)
# number of iterations for each Metropolis-Hastings (sampling) algorithm
N = rep(1e2,M)
h = Neg_EI # comment to test other h
###################
#### Algorithm ####
###################
f_min <- min(sampling$Value)
f_min_tracker <- c(f_min)
for (i in 1:20) {
if (i != 1) {
top <- data.frame(X1 = c(best[2]),
X2 = c(best[3]),
Value = 0)
top$Value <- DiceKriging::branin(c(top$X1,top$X2))
sampling <- rbind(top,sampling)
f_min <- min(sampling$Value)
f_min_tracker <- c(f_min_tracker, f_min)
}
## First estimate parameter
fitted_model <- DiceKriging::km(formula = ~1,
design = cbind(sampling$X1,sampling$X2),
response = sampling$Value,
covtype = "exp",
control = list(trace=FALSE))
# starting point
x0 = rep(0,dim)
# best value and point
best = c(h(x0),x0)
current = x0
for (k in 1:M) {
target = function(x) {
exp(-h(x) / big_T[k])
}
pi_current = target(current)
for (i in N[k]) {
# proposed point and target function value
proposed = rnorm(dim,current,0.5)%%1
pi_proposed = target(proposed)
u = runif(1)
# accept/reject proposed point
if (pi_current < Inf & (pi_current == 0 | u <= pi_proposed / pi_current)) {
current = proposed
pi_current = pi_proposed
}
# update the best point and value if value is better
h_current = h(current)
if (h_current < best[1]) {
best = c(h_current, current)
}
}
}
}
top <- data.frame(X1 = c(best[2]),
X2 = c(best[3]),
Value = 0)
top$Value <- DiceKriging::branin(c(top$X1,top$X2))
sampling <- rbind(top,sampling)
f_min <- min(sampling$Value)
f_min_tracker <- c(f_min_tracker, f_min)
View(sampling)
### Plots
plot1 <- plot(0:20, f_min_tracker, type = "l",
xlab = "Iterations after Initial Sample", ylab = "Maximum Profit", main = "Maximum Profit at Iteration")
### Plots
plot1 <- plot(0:20, f_min_tracker, type = "l",
xlab = "Iterations after Initial Sample", ylab = "Minimum Value", main = "Minimum Value at Iteration")
?DiceKriging::branin
n.grid <- 20
x.grid <- y.grid <- seq(0,1,length=n.grid)
design.grid <- expand.grid(x.grid, y.grid)
response.grid <- apply(design.grid, 1, branin)
n.grid <- 20
x.grid <- y.grid <- seq(0,1,length=n.grid)
design.grid <- expand.grid(x.grid, y.grid)
response.grid <- apply(design.grid, 1, DiceKriging::branin)
z.grid <- matrix(response.grid, n.grid, n.grid)
contour(x.grid,y.grid,z.grid,40)
n.grid <- 20
x.grid <- y.grid <- seq(0,1,length=n.grid)
design.grid <- expand.grid(x.grid, y.grid)
response.grid <- apply(design.grid, 1, DiceKriging::branin)
z.grid <- matrix(response.grid, n.grid, n.grid)
contour(x.grid,y.grid,z.grid,40)
points(sampling[21:40,]$X1,sampling[21:40,]$X2,col="blue",pch=16)
points(sampling[1:20,]$X1,sampling[1:20,]$X2,col="red",pch=16)
set.seed(1)
library(readxl)
library(tidyverse)
sampling_old <- read_xlsx("initial_sampling_data.xlsx", col_names = FALSE)
sampling <- sampling_old[sample(1:95,20),]
colnames(sampling) <- c("X1", "X2", "Value")
sampling$Value <- apply(sampling[,1:2], 1, DiceKriging::branin)
# negative expected improvement function (we try to minimize)
Neg_EI = function(x) {
y <- predict(fitted_model, matrix(x,nrow = 1), "UK")$mean
s <- predict(fitted_model, matrix(x,nrow = 1), "UK")$sd
z = (f_min-y)/s
-(f_min-y)*pnorm(z)-s*dnorm(z)
}
# Hyperparameters
dim = 2
# number of iterations
M = 1e2
# vector of T_1, T_2, ..., T_M closer to 0
big_T = 1/(1:M)
# number of iterations for each Metropolis-Hastings (sampling) algorithm
N = rep(1e2,M)
h = Neg_EI # comment to test other h
###################
#### Algorithm ####
###################
f_min <- min(sampling$Value)
f_min_tracker <- c(f_min)
for (i in 1:20) {
if (i != 1) {
top <- data.frame(X1 = c(best[2]),
X2 = c(best[3]),
Value = 0)
top$Value <- DiceKriging::branin(c(top$X1,top$X2))
sampling <- rbind(top,sampling)
f_min <- min(sampling$Value)
f_min_tracker <- c(f_min_tracker, f_min)
}
## First estimate parameter
fitted_model <- DiceKriging::km(formula = ~1,
design = cbind(sampling$X1,sampling$X2),
response = sampling$Value,
covtype = "exp",
control = list(trace=FALSE))
# starting point
x0 = rep(0,dim)
# best value and point
best = c(h(x0),x0)
current = x0
for (k in 1:M) {
target = function(x) {
exp(-h(x) / big_T[k])
}
pi_current = target(current)
for (i in N[k]) {
# proposed point and target function value
proposed = rnorm(dim,current,0.5)%%1
pi_proposed = target(proposed)
u = runif(1)
# accept/reject proposed point
if (pi_current < Inf & (pi_current == 0 | u <= pi_proposed / pi_current)) {
current = proposed
pi_current = pi_proposed
}
# update the best point and value if value is better
h_current = h(current)
if (h_current < best[1]) {
best = c(h_current, current)
}
}
}
}
top <- data.frame(X1 = c(best[2]),
X2 = c(best[3]),
Value = 0)
top$Value <- DiceKriging::branin(c(top$X1,top$X2))
sampling <- rbind(top,sampling)
f_min <- min(sampling$Value)
f_min_tracker <- c(f_min_tracker, f_min)
### Plots
plot1 <- plot(0:20, f_min_tracker, type = "l",
xlab = "Iterations after Initial Sample", ylab = "Minimum Value", main = "Minimum Value at Iteration")
n.grid <- 20
x.grid <- y.grid <- seq(0,1,length=n.grid)
design.grid <- expand.grid(x.grid, y.grid)
response.grid <- apply(design.grid, 1, DiceKriging::branin)
z.grid <- matrix(response.grid, n.grid, n.grid)
contour(x.grid,y.grid,z.grid,40)
points(sampling[21:40,]$X1,sampling[21:40,]$X2,col="blue",pch=16)
points(sampling[1:20,]$X1,sampling[1:20,]$X2,col="red",pch=16)
set.seed(1)
library(readxl)
library(tidyverse)
sampling_old <- read_xlsx("initial_sampling_data.xlsx", col_names = FALSE)
sampling <- sampling_old[sample(1:95,20),]
colnames(sampling) <- c("X1", "X2", "Value")
sampling$Value <- apply(sampling[,1:2], 1, DiceKriging::branin)
# negative expected improvement function (we try to minimize)
Neg_EI = function(x) {
y <- predict(fitted_model, matrix(x,nrow = 1), "UK")$mean
s <- predict(fitted_model, matrix(x,nrow = 1), "UK")$sd
z = (f_min-y)/s
-(f_min-y)*pnorm(z)-s*dnorm(z)
}
# Hyperparameters
dim = 2
# number of iterations
M = 1e2
# vector of T_1, T_2, ..., T_M closer to 0
big_T = 1/(1:M)
# number of iterations for each Metropolis-Hastings (sampling) algorithm
N = rep(1e2,M)
h = Neg_EI # comment to test other h
###################
#### Algorithm ####
###################
f_min <- min(sampling$Value)
f_min_tracker <- c(f_min)
for (i in 1:20) {
if (i != 1) {
top <- data.frame(X1 = c(best[2]),
X2 = c(best[3]),
Value = 0)
top$Value <- DiceKriging::branin(c(top$X1,top$X2))
sampling <- rbind(top,sampling)
f_min <- min(sampling$Value)
f_min_tracker <- c(f_min_tracker, f_min)
}
## First estimate parameter
fitted_model <- DiceKriging::km(formula = ~1,
design = cbind(sampling$X1,sampling$X2),
response = sampling$Value,
covtype = "exp",
control = list(trace=FALSE))
# starting point
x0 = rep(0,dim)
# best value and point
best = c(h(x0),x0)
current = x0
for (k in 1:M) {
target = function(x) {
exp(-h(x) / big_T[k])
}
pi_current = target(current)
for (i in N[k]) {
# proposed point and target function value
proposed = rnorm(dim,current,0.5)%%1
pi_proposed = target(proposed)
u = runif(1)
# accept/reject proposed point
if (pi_current < Inf & (pi_current == 0 | u <= pi_proposed / pi_current)) {
current = proposed
pi_current = pi_proposed
}
# update the best point and value if value is better
h_current = h(current)
if (h_current < best[1]) {
best = c(h_current, current)
}
}
}
}
top <- data.frame(X1 = c(best[2]),
X2 = c(best[3]),
Value = 0)
top$Value <- DiceKriging::branin(c(top$X1,top$X2))
sampling <- rbind(top,sampling)
f_min <- min(sampling$Value)
f_min_tracker <- c(f_min_tracker, f_min)
### Plots
plot1 <- plot(0:20, f_min_tracker, type = "l",
xlab = "Iterations after Initial Sample", ylab = "Minimum Value", main = "Minimum Value at Iteration")
n.grid <- 20
x.grid <- y.grid <- seq(0,1,length=n.grid)
design.grid <- expand.grid(x.grid, y.grid)
response.grid <- apply(design.grid, 1, DiceKriging::branin)
z.grid <- matrix(response.grid, n.grid, n.grid)
contour(x.grid,y.grid,z.grid,40)
points(sampling[21:40,]$X1,sampling[21:40,]$X2,col="blue",pch=16)
points(sampling[1:20,]$X1,sampling[1:20,]$X2,col="red",pch=16)
n.grid <- 20
x.grid <- y.grid <- seq(0,1,length=n.grid)
design.grid <- expand.grid(x.grid, y.grid)
response.grid <- apply(design.grid, 1, DiceKriging::branin)
z.grid <- matrix(response.grid, n.grid, n.grid)
contour(x.grid,y.grid,z.grid,40,
xlab = "x1", ylab = "x2")
points(sampling[21:40,]$X1,sampling[21:40,]$X2,col="blue",pch=16)
points(sampling[1:20,]$X1,sampling[1:20,]$X2,col="red",pch=16)
### Plots
plot1 <- plot(0:20, f_min_tracker, type = "l",
xlab = "Iterations after Initial Sample", ylab = "Minimum Value", main = "Minimum Value at Iteration")
set.seed(1)
library(readxl)
library(tidyverse)
sampling_old <- read_xlsx("initial_sampling_data.xlsx", col_names = FALSE)
sampling <- sampling_old[sample(1:95,20),]
colnames(sampling) <- c("X1", "X2", "Value")
sampling$Value <- apply(sampling[,1:2], 1, DiceKriging::branin)
# negative expected improvement function (we try to minimize)
Neg_EI = function(x) {
y <- predict(fitted_model, matrix(x,nrow = 1), "UK")$mean
s <- predict(fitted_model, matrix(x,nrow = 1), "UK")$sd
z = (f_min-y)/s
-(f_min-y)*pnorm(z)-s*dnorm(z)
}
# Hyperparameters
dim = 2
# number of iterations
M = 1e2
# vector of T_1, T_2, ..., T_M closer to 0
big_T = 1/(1:M)
# number of iterations for each Metropolis-Hastings (sampling) algorithm
N = rep(1e2,M)
h = Neg_EI # comment to test other h
###################
#### Algorithm ####
###################
f_min <- min(sampling$Value)
f_min_tracker <- c(f_min)
for (i in 1:40) {
if (i != 1) {
top <- data.frame(X1 = c(best[2]),
X2 = c(best[3]),
Value = 0)
top$Value <- DiceKriging::branin(c(top$X1,top$X2))
sampling <- rbind(top,sampling)
f_min <- min(sampling$Value)
f_min_tracker <- c(f_min_tracker, f_min)
}
## First estimate parameter
fitted_model <- DiceKriging::km(formula = ~1,
design = cbind(sampling$X1,sampling$X2),
response = sampling$Value,
covtype = "exp",
control = list(trace=FALSE))
# starting point
x0 = rep(0,dim)
# best value and point
best = c(h(x0),x0)
current = x0
for (k in 1:M) {
target = function(x) {
exp(-h(x) / big_T[k])
}
pi_current = target(current)
for (i in N[k]) {
# proposed point and target function value
proposed = rnorm(dim,current,0.5)%%1
pi_proposed = target(proposed)
u = runif(1)
# accept/reject proposed point
if (pi_current < Inf & (pi_current == 0 | u <= pi_proposed / pi_current)) {
current = proposed
pi_current = pi_proposed
}
# update the best point and value if value is better
h_current = h(current)
if (h_current < best[1]) {
best = c(h_current, current)
}
}
}
}
top <- data.frame(X1 = c(best[2]),
X2 = c(best[3]),
Value = 0)
top$Value <- DiceKriging::branin(c(top$X1,top$X2))
sampling <- rbind(top,sampling)
f_min <- min(sampling$Value)
f_min_tracker <- c(f_min_tracker, f_min)
### Plots
plot1 <- plot(0:40, f_min_tracker, type = "l",
xlab = "Iterations after Initial Sample", ylab = "Minimum Value", main = "Minimum Value at Iteration")
n.grid <- 20
x.grid <- y.grid <- seq(0,1,length=n.grid)
design.grid <- expand.grid(x.grid, y.grid)
response.grid <- apply(design.grid, 1, DiceKriging::branin)
z.grid <- matrix(response.grid, n.grid, n.grid)
contour(x.grid,y.grid,z.grid,40,
xlab = "x1", ylab = "x2")
points(sampling[21:60,]$X1,sampling[21:60,]$X2,col="blue",pch=16)
points(sampling[1:20,]$X1,sampling[1:20,]$X2,col="red",pch=16)
n.grid <- 20
x.grid <- y.grid <- seq(0,1,length=n.grid)
design.grid <- expand.grid(x.grid, y.grid)
response.grid <- apply(design.grid, 1, DiceKriging::branin)
z.grid <- matrix(response.grid, n.grid, n.grid)
contour(x.grid,y.grid,z.grid,40,
xlab = "x1", ylab = "x2")
points(sampling[41:60,]$X1,sampling[41:60,]$X2,col="blue",pch=16)
points(sampling[1:40,]$X1,sampling[1:40,]$X2,col="red",pch=16)
### Plots
plot1 <- plot(0:40, f_min_tracker, type = "l",
xlab = "Iterations after Initial Sample", ylab = "Minimum Value", main = "Minimum Value at Iteration")
## Read
data <- read_xlsx("data.xlsx", col_names = FALSE)
data$...3
max(data$...3)
